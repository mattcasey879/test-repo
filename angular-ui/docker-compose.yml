version: '1.0'

services:
  eureka-server:
    container_name: eureka-server
    image: mattcasey879/fscc_discovery-service
    ports:
      - "8136:8136"
    networks:
      - backend

  logindb:
    container_name: logindb
    image: mattcasey879/fscc_logindb
    environment:
      - MYSQL_ROOT_USERNAME=${LOGIN_DB_USER}
      - MYSQL_ROOT_PASSWORD=${LOGIN_DB_PASS}
      - MYSQL_DATABASE=${LOGIN_DB_DEFAULT_DB}
    volumes:
      - login-data:/var/lib/mysql
    ports:
      - 3307:3306
    networks:
      - backend
  
  employeedb:
    container_name: employeedb
    image: mattcasey879/fscc_employeedb
    environment:
      - MYSQL_ROOT_USERNAME=${EMPLOYEE_DB_USER}
      - MYSQL_ROOT_PASSWORD=${EMPLOYEE_DB_PASS}
      - MYSQL_DATABASE=${EMPLOYEE_DB_DEFAULT_DB}
    volumes:
      - employee-data:/var/lib/mysql
    ports:
      - 3306:3306
    networks:
      - backend


  employee-service:
    container_name: employeeService
    image: mattcasey879/fscc_employee-service
    ports:
      - 8080:8080
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=${EMPLOYEE_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${EMPLOYEE_DB_USER}
      - SPRING_DATATSOURCE_PASSWORD=${EMPLOYEE_DB_PASS}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_URL}
    depends_on:
      - eureka-server
      - employeedb
  
  login-service:
    container_name: loginService
    image: mattcasey879/fscc_login-service:1.1
    ports:
      - 8081:8081
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=${LOGIN_DB_URL}
      - SPRING_DATASOURCE_USERNAME=${LOGIN_DB_USER}
      - SPRING_DATATSOURCE_PASSWORD=${LOGIN_DB_PASS}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_URL}
    depends_on:
      - eureka-server
      - logindb
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.3.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - backend

  # broker:
  #   image: confluentinc/cp-kafka:7.3.0
  #   hostname: broker
  #   container_name: broker
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "29092:29092"
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: ${KAFKA_ID}
  #     KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SERCURITY_PROTOCOL_MAP}
  #     KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS}
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
  #   networks:
  #     - backend

  # ksqldb-server:
  #   image: confluentinc/ksqldb-server
  #   hostname: ksqldb-server
  #   container_name: ksqldb-server
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8088:8088"
  #   environment:
  #     KSQL_LISTENERS: ${KSQL_LISTENERS}
  #     KSQL_BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
  #     KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: ${KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE}
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: ${KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE}
  #   networks:
  #     - backend
  # registration-service:
  #     container_name: registrationService
  #     image: mattcasey879/fscc_registration-service
  #     ports:
  #       - 8083:8083
  #     networks:
  #       - backend
  #     environment:
  #     - SPRING_KAFKA_BOOTSTRAP_SERVERS=${BOOTSTRAP_SERVERS}
  #     - SPRING_KAFKA_CONSUMER_GROUP_ID=${SPRING_KAFKA_CONSUMER_GROUP_ID}
  #     - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_URL}
  #     depends_on:
  #       - eureka-server
  #       - ksqldb-server
  #       - broker
  api-gateway:
    container_name: apiGateway
    image: mattcasey879/fscc_api-gateway:1.0
    ports:
      - 80:80
    networks:
      - backend
    depends_on:
      - eureka-server
      - employee-service
      - login-service
      # - registration-service
    environment:
      - EUREKA_URL= ${EUREKA_CLIENT_URL}
  
  react-ui:
    container_name: react-ui
    image: fscc_react-ui:latest
    ports:
      - 3000:80
    networks:
      - frontend
    depends_on:
      - employee-service
      - login-service
  

networks:
    backend:
        driver: bridge
    frontend:
        driver: bridge
volumes:
  employee-data:
    external: true
  login-data:
    external: true

